import unittest
import pytest
import os  # Import os for path joining
import hashlib
from binascii import hexlify
from src.modules.exploit.relay import Relay
from src.modules.exploit.cracker import Cracker

# Define the path to the test wordlist
TEST_WORDLIST_PATH = os.path.join(os.path.dirname(__file__), 'test_wordlist.txt')

class TestRelay(unittest.TestCase):
    def setUp(self):
        self.relay = Relay()

    def test_start_relay(self):
        self.relay.start_relay()
        # Check the running state instead of the return value
        self.assertTrue(self.relay.running)
        self.relay.stop_relay()  # Clean up

    def test_stop_relay(self):
        self.relay.start_relay()
        self.relay.stop_relay()
        # Check the running state instead of the return value
        self.assertFalse(self.relay.running)

class TestCracker(unittest.TestCase):
    def setUp(self):
        # Ensure Cracker is initialized with the correct wordlist path
        self.cracker = Cracker(TEST_WORDLIST_PATH)

    def test_crack_hash(self):
        # NTLM hash for "qwerty" (not MD5)
        test_hash = "2D20D252A479F485CDF5E171D93985BF"
        result = self.cracker.crack_hash(test_hash)
        self.assertEqual(result, "qwerty")

    def test_crack_hash_not_found(self):
        # A hash for a password not in the test wordlist
        test_hash_not_found = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
        result = self.cracker.crack_hash(test_hash_not_found)
        self.assertIsNone(result)  # Expect None if password not found

def test_relay_init():
    relay = Relay()
    assert relay.running == False

def test_relay_start():
    relay = Relay()
    relay.start_relay()
    assert relay.running == True

def test_relay_stop():
    relay = Relay()
    relay.start_relay()
    relay.stop_relay()
    assert relay.running == False

if __name__ == '__main__':
    unittest.main()