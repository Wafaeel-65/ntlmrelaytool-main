from src.modules.exploit.ntlmrelayserver import NTLMRelayServer
from src.utils.mongo_handler import MongoDBHandler
import logging
import socket
from datetime import datetime
import platform

# Configure logging
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(name)s - %(message)s')
logger = logging.getLogger(__name__)

class Relay:
    def __init__(self, interface='0.0.0.0', port=445):
        # If we're on Windows and interface is specified, get its IP
        if platform.system() == 'Windows' and interface != '0.0.0.0':
            try:
                import psutil
                for iface, addrs in psutil.net_if_addrs().items():
                    if interface.lower() in iface.lower():
                        for addr in addrs:
                            if addr.family == socket.AF_INET and not addr.address.startswith('169.254.'):
                                interface = addr.address
                                break
                        break
            except Exception as e:
                logger.error(f"Error getting interface IP: {e}")
                interface = '0.0.0.0'
        
        self.interface = interface
        self.port = port
        self.server = None
        self.running = False
        self.logger = logging.getLogger(__name__)
        self.mongo_handler = MongoDBHandler()

    def set_target(self, target):
        """Set the target for NTLM relay"""
        if not self.server:
            self.server = NTLMRelayServer(self.interface, self.port)
        self.server.set_target(target)
        
        # Store target info in MongoDB
        target_data = {
            'host': target,
            'port': self.port,
            'timestamp': datetime.now(),
            'status': 'configured'
        }
        self.mongo_handler.store_capture(target_data)

    def start_relay(self, target=None):
        """Start the relay server with an optional target"""
        try:
            # Initialize server if not done
            if not self.server:
                self.server = NTLMRelayServer(self.interface, self.port)

            # Set or update target
            if target:
                self.set_target(target)
            elif not self.server.target:
                raise ValueError("Target must be specified")

            # Record relay start in MongoDB
            relay_data = {
                'type': 'relay_start',
                'interface': self.interface,
                'target': self.server.target,
                'port': self.port,
                'timestamp': datetime.now()
            }
            self.mongo_handler.store_capture(relay_data)

            # Start the server
            self.server.start()
            self.running = True

        except (socket.error, ConnectionError) as e:
            self.logger.error(f"Network error: {e}")
            # Record error in MongoDB
            error_data = {
                'type': 'relay_error',
                'error': str(e),
                'timestamp': datetime.now(),
                'status': 'failed'
            }
            self.mongo_handler.store_result(error_data)
            raise
        except Exception as e:
            self.logger.error(f"Failed to start relay: {e}")
            # Record error in MongoDB
            error_data = {
                'type': 'relay_error',
                'error': str(e),
                'timestamp': datetime.now(),
                'status': 'failed'
            }
            self.mongo_handler.store_result(error_data)
            raise

    def stop_relay(self):
        """Stop the relay server"""
        try:
            if self.server:
                self.server.stop()
            self.running = False
            
            # Record relay stop in MongoDB
            stop_data = {
                'type': 'relay_stop',
                'interface': self.interface,
                'target': self.server.target if self.server else None,
                'timestamp': datetime.now(),
                'status': 'stopped'
            }
            self.mongo_handler.store_capture(stop_data)
            
        except Exception as e:
            self.logger.error(f"Failed to stop relay: {e}")
            # Record error in MongoDB
            error_data = {
                'type': 'relay_error',
                'error': str(e),
                'timestamp': datetime.now(),
                'status': 'failed'
            }
            self.mongo_handler.store_result(error_data)
            raise
