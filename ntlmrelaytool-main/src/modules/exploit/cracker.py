import hashlib
from binascii import hexlify
from Crypto.Hash import MD4

class Cracker:
    def __init__(self, wordlist):
        """
        Initialize the Cracker with a wordlist.

        :param wordlist: Path to a file containing a list of potential passwords, one per line.
        """
        self.wordlist = wordlist

    def crack_hash(self, ntlm_hash):
        def password_generator(filepath):
            try:
                with open(filepath, 'r') as f:
                    for line in f:
                        password = line.strip()
                        print(f"DEBUG: Yielding password: '{password}'")
                        yield password
            except (FileNotFoundError, PermissionError) as e:
                print(f"Error opening file {filepath}: {e}")
                return

        for password in password_generator(self.wordlist):
            if self._check_password(ntlm_hash, password):
                return password
        return None

    def _check_password(self, ntlm_hash, password):
        """
        Checks if the given password matches the provided NTLM hash.

        Args:
            ntlm_hash (str): The NTLM hash to compare against.
            password (str): The password to be hashed and checked.

        Returns:
            bool: True if the password matches the NTLM hash, False otherwise.
        """
        try:
            # Convert password to UTF-16LE encoding
            password_unicode = password.encode('utf-16le')
            # Calculate MD4 hash using pycryptodome
            md4_hash = MD4.new(password_unicode).digest()
            calculated_hash = hexlify(md4_hash).decode('utf-8').upper()
            return calculated_hash == ntlm_hash.upper()
        except Exception as e:
            print(f"Error checking password '{password}': {e}")
            return False